[["Map",1,2,9,10,105,106,144,145],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.1.1","content-config-digest","fc191ca46bc0725a","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"material-theme\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false},\"legacy\":{\"collections\":false}}","books",["Map",11,12,24,25,34,35,44,45,53,54,63,64,73,74,81,82,89,90,98,99],"artemis",{"id":11,"data":13,"filePath":21,"assetImports":22},{"title":14,"released":15,"author":16,"status":17,"rating":18,"finished_on":19,"cover":20},"Artemis",2017,"Andy Weir","finished",9,"August 2024","__ASTRO_IMAGE_../images/books/artemis.jpg","src/data/books/books.json",[23],"../images/books/artemis.jpg","fractal-noise",{"id":24,"data":26,"filePath":21,"assetImports":32},{"title":27,"released":28,"author":29,"status":17,"rating":30,"finished_on":19,"cover":31},"Fractal Noise",2023,"Christopher Paolini",5,"__ASTRO_IMAGE_../images/books/fractal-noise.jpg",[33],"../images/books/fractal-noise.jpg","the-apollo-murders",{"id":34,"data":36,"filePath":21,"assetImports":42},{"title":37,"released":38,"author":39,"status":17,"rating":18,"finished_on":40,"cover":41},"The Apollo Murders",2021,"Chris Hadfield","December 2023","__ASTRO_IMAGE_../images/books/the-apollo-murders.webp",[43],"../images/books/the-apollo-murders.webp","the-martian",{"id":44,"data":46,"filePath":21,"assetImports":51},{"title":47,"released":48,"author":16,"status":17,"rating":18,"finished_on":49,"cover":50},"The Martian",2011,"July 2024","__ASTRO_IMAGE_../images/books/the-martian.webp",[52],"../images/books/the-martian.webp","the-rural-voter",{"id":53,"data":55,"filePath":21,"assetImports":61},{"title":56,"released":28,"author":57,"status":17,"rating":58,"finished_on":59,"cover":60},"The Rural Voter","Nicholas F. Jacobs and Daniel M. Shea",8,"December 2024","__ASTRO_IMAGE_../images/books/the-rural-voter.jpg",[62],"../images/books/the-rural-voter.jpg","war",{"id":63,"data":65,"filePath":21,"assetImports":71},{"title":66,"released":67,"author":68,"status":69,"cover":70},"War",2024,"Bob Woodward","to read","__ASTRO_IMAGE_../images/books/war.jpg",[72],"../images/books/war.jpg","the-other-significant-others",{"id":73,"data":75,"filePath":21,"assetImports":79},{"title":76,"released":67,"author":77,"status":69,"cover":78},"The Other Significant Others","Rhaina Cohen","__ASTRO_IMAGE_../images/books/other-significant-others.jpg",[80],"../images/books/other-significant-others.jpg","moby-dick",{"id":81,"data":83,"filePath":21,"assetImports":88},{"title":84,"released":85,"author":86,"status":87,"cover":20},"Moby Dick",1851,"Herman Melville","currently reading",[23],"the-alchemist",{"id":89,"data":91,"filePath":21,"assetImports":97},{"title":92,"released":93,"author":94,"status":17,"rating":95,"finished_on":96,"cover":20},"The Alchemist",1988,"Paulo Coelho",7,"October 2022",[23],"war-and-peace",{"id":98,"data":100,"filePath":21,"assetImports":104},{"title":101,"released":102,"author":103,"status":69,"cover":20},"War and Peace",1869,"Leo Tolstoy",[23],"yearRecaps",["Map",107,108,119,120,131,132],"2023",{"id":107,"data":109,"body":110,"filePath":111,"digest":112,"rendered":113},{"year":28},"I read some things in 2023","src/data/books/year_summaries/2023.md","ab558ac0d82c57c7",{"html":114,"metadata":115},"\u003Cp>I read some things in 2023\u003C/p>",{"headings":116,"imagePaths":117,"frontmatter":118},[],[],{"year":28},"2024",{"id":119,"data":121,"body":122,"filePath":123,"digest":124,"rendered":125},{"year":67},"I perpetually think I’m going to be more likely to read than I\nactually am, and as much as I like to think that I will put in 10\nminutes of the Hunchback of Notre Dame every night before bed, I\nrealised I’d rather read something ‘fun’ instead of trying to force\nmyself to read a ‘classic’ and ending up not reading anything at all.\nI’m happy to say this worked pretty well, and did a lot more casual\nreading this year than I have in years past.","src/data/books/year_summaries/2024.md","206adfed302b3cc9",{"html":126,"metadata":127},"\u003Cp>I perpetually think I’m going to be more likely to read than I\nactually am, and as much as I like to think that I will put in 10\nminutes of the Hunchback of Notre Dame every night before bed, I\nrealised I’d rather read something ‘fun’ instead of trying to force\nmyself to read a ‘classic’ and ending up not reading anything at all.\nI’m happy to say this worked pretty well, and did a lot more casual\nreading this year than I have in years past.\u003C/p>",{"headings":128,"imagePaths":129,"frontmatter":130},[],[],{"year":67},"2022",{"id":131,"data":133,"body":135,"filePath":136,"digest":137,"rendered":138},{"year":134},2022,"I did not that much reading in 2022","src/data/books/year_summaries/2022.md","5eff8985aafe4d0e",{"html":139,"metadata":140},"\u003Cp>I did not that much reading in 2022\u003C/p>",{"headings":141,"imagePaths":142,"frontmatter":143},[],[],{"year":134},"posts",["Map",146,147,178,179,203,204,239,240,258,259,307,308,345,346],"building-portfolio-with-wordpress",{"id":146,"data":148,"body":155,"filePath":156,"digest":157,"rendered":158},{"title":149,"summary":150,"pubDate":151,"links":152,"type":154},"Building My Personal Website with WordPress","Four designs and three platforms later, I finally built my personal portfolio using WordPress","April 13 2021",[153],"https://matthewberger.ca","Development","> Update (03/14/22): This site is no longer hosted using WordPress, but instead using Next.js and Strapi (among other tools). I plan to write a post about why I decided to make the switch sometime soon, but thought I'd keep this article up because my thought process and the journey still holds. Thanks!\n>\n> \\- Matthew\n\nHello Friends!\n\nThank you for checking out my website, I hope you enjoy what you find! Without further ado, I’ll let you get into my first blog post – the journey of creating this website.\n\nAlthough the trope that web developer exist in a perpetual state of never finishing their personal website seems to have reached meme status, in my experience it seems to be grounded in some truth.\n\n![Picture1.jpg](https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture1_25ac7b6b84.jpg)\n\nI say this because the journey to reach this final website took four different designs and about three different platforms – so certainly an adventure, and what could be more fun than going through all of them?\n\n## Part 1: This Should be Easy\n\nThe beginning of the journey started all the way back in 2018, when I thought I should brush up on my HTML & CSS skills by building myself a personal website. I do have to admit this era was marked by an overly cavalier attitude towards the complexity of this project, where I was quite confident that having a general colour scheme and layout in my head would be enough to code it from there. In retrospect, I’m not surprised I didn’t get very far past the header.\n\n![Picture2.png](https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture2_e8ce360937.png)\n\nTo regain confidence and inspiration, I watched a few Youtube videos from Charli Marie, a Barcelona based designer for the newsletter marketing company Convertkit.\n\nIt was here that I learned about Figma, a free design software similar to Sketch and Adobe XD, as Charli used it to show how she designs website layouts– so exactly what I needed to continue the journey. Since beginning to use it, I have become a big fan, using it for everything from the aforementioned web design, to brochures for school projects, to… the occasional meme.\n\nSo, after spending some time designing a new layout centered around using assorted shapes as accents throughout the website, a design that I still think looks pretty cool… albeit lacking a little bit of maturity I decided it was once again time to start coding.\n\n![Picture3.png](https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture3_f1b5cbd925.png)\n\n## Part 2: Implementation option Overload\n\nUnfortunately, I think this is the moment when the “what platform do I use” bug bit.\n\nAfter watching a few more of Charli’s videos, I was introduced to Webflow – a no-code website creator that combines a visual design experience while still allowing control over the same HTML and CSS properties that you would usually use while coding a website.\n\nSo, although I started in Webflow and enjoyed the experience, perhaps it was simply that school became more pressing, or because I ran out of motivation, but finishing this design slowly dropped further and further down my to-do list.\n\nYet as I am sure you have figured, this was not the end of the personal website saga. My decision that I needed a website was resurrected when I (and the rest of the world) had little else to do – the quarantine of 2020.\n\nThis time, I thought about creating a website under the name of a company – ‘Overpass Creative.’ Perhaps this was because I was trying to convince myself that no, I hadn’t actually abandoned my past personal websites, and that I would find a different use for them. Yet, once the main design was there, the last 10% required to add responsiveness and deploy it just never happened.\n\n![Picture4.png](https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture4_a11518bdc1.png)\n\n## Part 3: The Redemption\n\nHowever, I wasn’t going to let this project best me. Knowing in the back of my mind that I had to create a website sooner or later, it was this final attempt that was the successful one. After looking at my previous designs and realizing that if I wanted to go through this process for the last time, I would need to build something which I would be happy with for a while to come, which meant realizing that for my personal taste, my past websites looked too much like they came from a template. Furthermore, I knew I wanted a site that was able to combine my skills in 3D modelling, photography and design.\n\nAdditionally, I also wanted to make sure I planned the project in a way that I would not get overwhelmed and would be able to build a foundation for the website and slowly polish it over time.\n\nWhen it came to choosing a platform, I decided to create a WordPress site with a custom theme on a VPS (Virtual Private Server)\n\nAlthough I looked at many alternatives, including Github Pages (which I still think is a great way to host a static page for free), I believe the experience gained by learning a platform with such ubiquity as WordPress is incredibly valuable, along with allowing its numerous features and plugins to assist my website creation journey.\n\nAlong the way I did look at other frameworks such as tailwindcss and bootstrap, though I figured that in order to make sure I actually finished the project, learning wordpress was enough.\n\nOf course, there are still more things I plan to add, such as using threeJS to make the hamburger machine on the homepage interactive, but I have to say I’m happy to finally have a corner of the internet that I can call my own.\n\n## Conclusion\n\nThanks for reading! If you have any comments or ideas feel free to reach out to me on Twitter @itsmattberger. Otherwise, until next time!","src/data/posts/building-portfolio-with-wordpress.md","7bbfaf21fa08152f",{"html":159,"metadata":160},"\u003Cblockquote>\n\u003Cp>Update (03/14/22): This site is no longer hosted using WordPress, but instead using Next.js and Strapi (among other tools). I plan to write a post about why I decided to make the switch sometime soon, but thought I’d keep this article up because my thought process and the journey still holds. Thanks!\u003C/p>\n\u003Cp>- Matthew\u003C/p>\n\u003C/blockquote>\n\u003Cp>Hello Friends!\u003C/p>\n\u003Cp>Thank you for checking out my website, I hope you enjoy what you find! Without further ado, I’ll let you get into my first blog post – the journey of creating this website.\u003C/p>\n\u003Cp>Although the trope that web developer exist in a perpetual state of never finishing their personal website seems to have reached meme status, in my experience it seems to be grounded in some truth.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture1_25ac7b6b84.jpg\" alt=\"Picture1.jpg\">\u003C/p>\n\u003Cp>I say this because the journey to reach this final website took four different designs and about three different platforms – so certainly an adventure, and what could be more fun than going through all of them?\u003C/p>\n\u003Ch2 id=\"part-1-this-should-be-easy\">Part 1: This Should be Easy\u003C/h2>\n\u003Cp>The beginning of the journey started all the way back in 2018, when I thought I should brush up on my HTML &#x26; CSS skills by building myself a personal website. I do have to admit this era was marked by an overly cavalier attitude towards the complexity of this project, where I was quite confident that having a general colour scheme and layout in my head would be enough to code it from there. In retrospect, I’m not surprised I didn’t get very far past the header.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture2_e8ce360937.png\" alt=\"Picture2.png\">\u003C/p>\n\u003Cp>To regain confidence and inspiration, I watched a few Youtube videos from Charli Marie, a Barcelona based designer for the newsletter marketing company Convertkit.\u003C/p>\n\u003Cp>It was here that I learned about Figma, a free design software similar to Sketch and Adobe XD, as Charli used it to show how she designs website layouts– so exactly what I needed to continue the journey. Since beginning to use it, I have become a big fan, using it for everything from the aforementioned web design, to brochures for school projects, to… the occasional meme.\u003C/p>\n\u003Cp>So, after spending some time designing a new layout centered around using assorted shapes as accents throughout the website, a design that I still think looks pretty cool… albeit lacking a little bit of maturity I decided it was once again time to start coding.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture3_f1b5cbd925.png\" alt=\"Picture3.png\">\u003C/p>\n\u003Ch2 id=\"part-2-implementation-option-overload\">Part 2: Implementation option Overload\u003C/h2>\n\u003Cp>Unfortunately, I think this is the moment when the “what platform do I use” bug bit.\u003C/p>\n\u003Cp>After watching a few more of Charli’s videos, I was introduced to Webflow – a no-code website creator that combines a visual design experience while still allowing control over the same HTML and CSS properties that you would usually use while coding a website.\u003C/p>\n\u003Cp>So, although I started in Webflow and enjoyed the experience, perhaps it was simply that school became more pressing, or because I ran out of motivation, but finishing this design slowly dropped further and further down my to-do list.\u003C/p>\n\u003Cp>Yet as I am sure you have figured, this was not the end of the personal website saga. My decision that I needed a website was resurrected when I (and the rest of the world) had little else to do – the quarantine of 2020.\u003C/p>\n\u003Cp>This time, I thought about creating a website under the name of a company – ‘Overpass Creative.’ Perhaps this was because I was trying to convince myself that no, I hadn’t actually abandoned my past personal websites, and that I would find a different use for them. Yet, once the main design was there, the last 10% required to add responsiveness and deploy it just never happened.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/matthewberger/image/upload/v1647188543/Picture4_a11518bdc1.png\" alt=\"Picture4.png\">\u003C/p>\n\u003Ch2 id=\"part-3-the-redemption\">Part 3: The Redemption\u003C/h2>\n\u003Cp>However, I wasn’t going to let this project best me. Knowing in the back of my mind that I had to create a website sooner or later, it was this final attempt that was the successful one. After looking at my previous designs and realizing that if I wanted to go through this process for the last time, I would need to build something which I would be happy with for a while to come, which meant realizing that for my personal taste, my past websites looked too much like they came from a template. Furthermore, I knew I wanted a site that was able to combine my skills in 3D modelling, photography and design.\u003C/p>\n\u003Cp>Additionally, I also wanted to make sure I planned the project in a way that I would not get overwhelmed and would be able to build a foundation for the website and slowly polish it over time.\u003C/p>\n\u003Cp>When it came to choosing a platform, I decided to create a WordPress site with a custom theme on a VPS (Virtual Private Server)\u003C/p>\n\u003Cp>Although I looked at many alternatives, including Github Pages (which I still think is a great way to host a static page for free), I believe the experience gained by learning a platform with such ubiquity as WordPress is incredibly valuable, along with allowing its numerous features and plugins to assist my website creation journey.\u003C/p>\n\u003Cp>Along the way I did look at other frameworks such as tailwindcss and bootstrap, though I figured that in order to make sure I actually finished the project, learning wordpress was enough.\u003C/p>\n\u003Cp>Of course, there are still more things I plan to add, such as using threeJS to make the hamburger machine on the homepage interactive, but I have to say I’m happy to finally have a corner of the internet that I can call my own.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Thanks for reading! If you have any comments or ideas feel free to reach out to me on Twitter @itsmattberger. Otherwise, until next time!\u003C/p>",{"headings":161,"imagePaths":175,"frontmatter":176},[162,166,169,172],{"depth":163,"slug":164,"text":165},2,"part-1-this-should-be-easy","Part 1: This Should be Easy",{"depth":163,"slug":167,"text":168},"part-2-implementation-option-overload","Part 2: Implementation option Overload",{"depth":163,"slug":170,"text":171},"part-3-the-redemption","Part 3: The Redemption",{"depth":163,"slug":173,"text":174},"conclusion","Conclusion",[],{"title":149,"summary":150,"pubDate":151,"links":177,"type":154},[153],"lessons-from-coop",{"id":178,"data":180,"body":185,"filePath":186,"digest":187,"rendered":188},{"title":181,"summary":182,"pubDate":183,"type":184},"Lessons Learned from Co-Op","Some things I’ve learned from my first two co-op experiences","April 30 2023","Tech Adjacent","I will soon be wrapping up my second co-op term, and have found myself reflecting on the skills I've gained and the lessons I've learned. My first co-op was at Tradable Bits, a company that is built around helping organisations collect first party data on their fans, with a specific focus on music and sports businesses. My second co-op has been at Tamvoes Health, a startup created with the mission of building a health management platform to provide a central location for patients, their family, and doctors to view and manage their healthcare data. From these experiences, I’ve not only been able to grow my skills as a developer, improving at everything from React to SQL, but I’ve also learned my fair share of lessons beyond these ‘hard’ skills, which is what I’ve written about today.\n\n## 1. Learn How to Ask Questions\n\nThe first key thing that I've learned over the course of my co-op journey is the importance of asking questions. When I started my first job at Tradable Bits, one of the things that I worried about was whether I was asking too many questions, particularly about the best way to do something. Of course, they were well intentioned - I didn't want to waste time doing something one way only to have to redo it some other way, but I also didn't want to waste my boss' time. Thankfully, my boss assured me that this wasn't the case, but I did also realise something important. Namely, instead of simply asking a question, the better course of action is almost always to ask a question alongside potential solutions you've thought of to address it. Doing so demonstrates that you're capable of thinking critically and creatively, and that you're willing to put in the effort to find solutions to complex problems. After all, it's important to remember that if you're working on a certain task or with a particular part of the codebase, you are likely the one who is most well acquainted with why it works the way it does, and thus have the ability to judge whether solutions or feasible or not. All this to say, it's important to remember that not all of your solutions will be the right ones, and you need to be open to feedback and willing to learn from your mistakes.\n\n## 2. Use Your Strengths to Your Advantage\n\nBefore I ever got into serious web development, I remember being in Grade 7 and playing around with Canva and PicMonkey to make cool thumbnails for my Minecraft Youtube videos. Although my opinion on what looked good at the time may have been a bit questionable, since then I've only deepened my appreciation for good design, and nowadays find myself admiring everything from typefaces to product packaging.\n\nAlthough at times having such an eye for details can be a double edged sword, I've found it to be very beneficial in much my work as a developer. Apart from obvious situations where having a design background is helpful, such as when designing my personal website, I have found other benefits as well. I'll begin with Tamvoes, where working on a small team meant that when a new feature was requested, I was responsible for everything from a wireframe all the way to the final product, which often meant firing up Figma at the start of a project instead of jumping straight into my IDE. And though I sometimes wondered if the time spent in Figma was worth it, being able to consult my boss to ensure that we were on the same page about what a feature should look like before I started to code it allowed us to make better UX decisions, and ended up saving time in the long run.\n\nYet, this is not to say that an eye for detail is only useful when I am responsible for an entire interface. For example, at Tradable Bits, although there were designers responsible for coming up with the UI for new features, I still found myself being asked by the other developers to catch any small mistakes that they might have made, whether it was using the wrong colour or having icons that were slightly misaligned. And yes, although I recognise that these small inconsistencies will likely be indiscernible by most users, I strongly believe that these are the inconsistencies that lead to poor user experience if they are allowed to stack up over time. In this way, I feel that by using my design strengths, I have left a greater positive impact that I may have otherwise.\n\n## 3. There's more than one way to solve a problem\n\nOne of the features I worked on at Tradable Bits was the ability for users to create Facebook posts directly from within the platform. Essentially, when you upload a video to Facebook via their API, you get a callback URL to view the post you created. However, when creating a post that contains a video, it naturally takes some time for Facebook to process the video, so if you view the callback link before the video is done processing, you get redirected to the Facebook homepage instead of your own video. When I realised this would be a problem when trying to show a user their post, I really wasn't sure what to do about it. I thought that maybe I should find a way to check if a redirect occurred when you navigated to the link, and only provide the link to the user once there was no redirect. However, this would have been complicated and there were no tools in the codebase that would allow for such an action. Perplexed, I went to my boss and offered up this issue, to which he said - “Oh, that sounds like you should just add a tooltip that tells people to check back if the link doesn't work.” It was such an obvious solution, yet it was something that hadn't even crossed my mind, and in that moment I realised I had been so caught up in the technical, code-related ways to address the problem, that I had failed to think about the other ways that might be a more suitable way to solve it. Ultimately, it taught me that not all problems require complex technical solutions, and that spending some time to find the best way to solve a problem can save you a lot of time and headaches.\n\nOf course, these lessons are far from everything that I've been fortunate to learn about during my co-op experience so far. Additionally, I've also been able to expand my skills as a developer, and have learned from some amazing people. So, whether you're someone going into your first co-op, or just curious on what I've taken away from the work I've done, I hope this has been an insightful read.","src/data/posts/lessons-from-coop.md","4d32bf3e654d4f56",{"html":189,"metadata":190},"\u003Cp>I will soon be wrapping up my second co-op term, and have found myself reflecting on the skills I’ve gained and the lessons I’ve learned. My first co-op was at Tradable Bits, a company that is built around helping organisations collect first party data on their fans, with a specific focus on music and sports businesses. My second co-op has been at Tamvoes Health, a startup created with the mission of building a health management platform to provide a central location for patients, their family, and doctors to view and manage their healthcare data. From these experiences, I’ve not only been able to grow my skills as a developer, improving at everything from React to SQL, but I’ve also learned my fair share of lessons beyond these ‘hard’ skills, which is what I’ve written about today.\u003C/p>\n\u003Ch2 id=\"1-learn-how-to-ask-questions\">1. Learn How to Ask Questions\u003C/h2>\n\u003Cp>The first key thing that I’ve learned over the course of my co-op journey is the importance of asking questions. When I started my first job at Tradable Bits, one of the things that I worried about was whether I was asking too many questions, particularly about the best way to do something. Of course, they were well intentioned - I didn’t want to waste time doing something one way only to have to redo it some other way, but I also didn’t want to waste my boss’ time. Thankfully, my boss assured me that this wasn’t the case, but I did also realise something important. Namely, instead of simply asking a question, the better course of action is almost always to ask a question alongside potential solutions you’ve thought of to address it. Doing so demonstrates that you’re capable of thinking critically and creatively, and that you’re willing to put in the effort to find solutions to complex problems. After all, it’s important to remember that if you’re working on a certain task or with a particular part of the codebase, you are likely the one who is most well acquainted with why it works the way it does, and thus have the ability to judge whether solutions or feasible or not. All this to say, it’s important to remember that not all of your solutions will be the right ones, and you need to be open to feedback and willing to learn from your mistakes.\u003C/p>\n\u003Ch2 id=\"2-use-your-strengths-to-your-advantage\">2. Use Your Strengths to Your Advantage\u003C/h2>\n\u003Cp>Before I ever got into serious web development, I remember being in Grade 7 and playing around with Canva and PicMonkey to make cool thumbnails for my Minecraft Youtube videos. Although my opinion on what looked good at the time may have been a bit questionable, since then I’ve only deepened my appreciation for good design, and nowadays find myself admiring everything from typefaces to product packaging.\u003C/p>\n\u003Cp>Although at times having such an eye for details can be a double edged sword, I’ve found it to be very beneficial in much my work as a developer. Apart from obvious situations where having a design background is helpful, such as when designing my personal website, I have found other benefits as well. I’ll begin with Tamvoes, where working on a small team meant that when a new feature was requested, I was responsible for everything from a wireframe all the way to the final product, which often meant firing up Figma at the start of a project instead of jumping straight into my IDE. And though I sometimes wondered if the time spent in Figma was worth it, being able to consult my boss to ensure that we were on the same page about what a feature should look like before I started to code it allowed us to make better UX decisions, and ended up saving time in the long run.\u003C/p>\n\u003Cp>Yet, this is not to say that an eye for detail is only useful when I am responsible for an entire interface. For example, at Tradable Bits, although there were designers responsible for coming up with the UI for new features, I still found myself being asked by the other developers to catch any small mistakes that they might have made, whether it was using the wrong colour or having icons that were slightly misaligned. And yes, although I recognise that these small inconsistencies will likely be indiscernible by most users, I strongly believe that these are the inconsistencies that lead to poor user experience if they are allowed to stack up over time. In this way, I feel that by using my design strengths, I have left a greater positive impact that I may have otherwise.\u003C/p>\n\u003Ch2 id=\"3-theres-more-than-one-way-to-solve-a-problem\">3. There’s more than one way to solve a problem\u003C/h2>\n\u003Cp>One of the features I worked on at Tradable Bits was the ability for users to create Facebook posts directly from within the platform. Essentially, when you upload a video to Facebook via their API, you get a callback URL to view the post you created. However, when creating a post that contains a video, it naturally takes some time for Facebook to process the video, so if you view the callback link before the video is done processing, you get redirected to the Facebook homepage instead of your own video. When I realised this would be a problem when trying to show a user their post, I really wasn’t sure what to do about it. I thought that maybe I should find a way to check if a redirect occurred when you navigated to the link, and only provide the link to the user once there was no redirect. However, this would have been complicated and there were no tools in the codebase that would allow for such an action. Perplexed, I went to my boss and offered up this issue, to which he said - “Oh, that sounds like you should just add a tooltip that tells people to check back if the link doesn’t work.” It was such an obvious solution, yet it was something that hadn’t even crossed my mind, and in that moment I realised I had been so caught up in the technical, code-related ways to address the problem, that I had failed to think about the other ways that might be a more suitable way to solve it. Ultimately, it taught me that not all problems require complex technical solutions, and that spending some time to find the best way to solve a problem can save you a lot of time and headaches.\u003C/p>\n\u003Cp>Of course, these lessons are far from everything that I’ve been fortunate to learn about during my co-op experience so far. Additionally, I’ve also been able to expand my skills as a developer, and have learned from some amazing people. So, whether you’re someone going into your first co-op, or just curious on what I’ve taken away from the work I’ve done, I hope this has been an insightful read.\u003C/p>",{"headings":191,"imagePaths":201,"frontmatter":202},[192,195,198],{"depth":163,"slug":193,"text":194},"1-learn-how-to-ask-questions","1. Learn How to Ask Questions",{"depth":163,"slug":196,"text":197},"2-use-your-strengths-to-your-advantage","2. Use Your Strengths to Your Advantage",{"depth":163,"slug":199,"text":200},"3-theres-more-than-one-way-to-solve-a-problem","3. There’s more than one way to solve a problem",[],{"title":181,"summary":182,"pubDate":183,"type":184},"hexguess-game",{"id":203,"data":205,"body":213,"filePath":214,"digest":215,"rendered":216},{"title":206,"summary":207,"image":208,"pubDate":209,"links":210,"type":154},"HexGuess","I made a game using React to practice guessing colours based on their hex codes","https://res.cloudinary.com/matthewberger/image/upload/v1647296367/Hex_Guess_Screenshot_eaf42ef385.png","Dec 1 2021",[211,212],"https://github.com/bergermaestro/hex-guesser","https://hex-guesser.netlify.app/","## The Backstory\n\nMy first foray into web development was when my dad introduced me to Wix sometime around Grade 4, and although I don’t have any records of what I built at that time, I can assure you the flash-based site with a bright orange background was truly a relic of the era. _(RIP Flash)_\n\nIn Grade 7, I learned about the basics of HTML and CSS, and have been coding and making websites ever since. _(Yes, I feel old when I remember that I learned CSS before tools like Flexbox and CSS Grid existed)_\n\nSometime I decided that it would be beneficial to put these skills to good use and build a personal website, but I didn’t know how to take a collection of files from my local computer that looked and worked like a website, and actually put them in a place where anyone could access them. To me, it all seemed radically overcomplicated - everything I came across was mentioning things like putting the files on a server, port forwarding, making sure you have a static IP, controlling what ports you have open, and it is safe to say that I quickly became overwhelmed.\n\nAt a loss, this is when I turned to Wordpress, which after watching a few videos, seemed like exactly what I needed. I would be able to spin up a Linux server using a cloud hosting provider such as Linode or Vultr, run the Wordpress installer, and then simply focus on coding my custom theme.\n\nYet, I quickly started running into issues and limitations with Wordpress. I could feel that it was really designed for blogs, and that uses outside of that required some clunky workarounds. Additionally, I often felt ‘isolated’ from other more modern tools that I wanted to use, such as TailwindCSS.\n\nAdditionally, now that I had my foot in the door and was gaining a better understanding of how other CMS systems worked, rebuilding my site on a more ‘modern’ tech stack seemed much more appealing. This is when I decided to take the plunge and do what seemed to be the next step for developing frontend web interfaces - learning React.\n\n> **_Read More:_ Why I Rebuilt My Blog - COMING SOON**\n\n## Part 1: Learning React\n\nBefore learning React, I decided that it would probably be best to brush up on my Javascript, but I quickly found that a lot of programming tutorials that explain a language lie on two extremes - they are either “this is a variable and this is how we can put it inside an if statement,” or they’re less tutorials and people just blazing through a complex project. Now, I’m certainly not saying that these videos do not have an entirely valid audience, but instead wishing that there was more content targetted at the middle ground - people who already know how to code in a different language, but want to know about the ‘special’ things that a language offers. _(If anyone knows of a resource like this, please let me know about it.)_\n\nUltimately, I was not able to find this content, so I decided to jump straight into the deep end, and go back if I came across any concepts which were confusing to me. It was now when I turned to my two favourite channels to learn programming concepts: [Fireship.io](https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA) and [Traversy Media](https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA).\n\nI began by watching Fireship’s 100 seconds of React Video, which I like because it gave me a high level understanding of how React worked:\n\n[React in 100 Seconds](https://www.youtube.com/watch?v=Tn6-PIqc4UM&feature=youtu.be)\n\nOnce I had finished this, I moved onto Brad Traversy’s video, which I tend to watch first at 2x or 3x speed to get the general idea, and then watch again following along myself where I stop and pause if needed.\n\n[React JS Crash Course](https://www.youtube.com/watch?v=w7ejDZ8SWv8&t=1502s)\n\n## Part 2: Designing the Interface\n\nAs I learned from the first time I built my website, figuring out what you want your user interface to look like beforehand is of paramount importance. Thus, before I could begin coding, I took to using my iPad and notability in order to begin creating a mockup. I had a pretty good idea of what I wanted the site to look like beforehand, so there wasn’t as much brainstorming as I might otherwise.\n\n![hexGuesser mockup1.jpeg](https://res.cloudinary.com/matthewberger/image/upload/v1647712233/hex_Guesser_mockup1_d3f02db4e7.jpg)\n\n![hexGuesser mockup2.jpeg](https://res.cloudinary.com/matthewberger/image/upload/v1647712232/hex_Guesser_mockup2_de05f21618.jpg)\n\nAfter this, I refined my ideas a bit more in Figma, and then it was time to start coding!\n\n![hexguess-mockup.png](https://res.cloudinary.com/matthewberger/image/upload/v1647712232/hexguess_mockup_839f2af8bf.png)\n\n## Part 3: Starting to Code\n\nSo, with a single `npx create-react app`, we were off to the races. I decided that the best way to approach things would be to create the user interface using TailwindCSS (which I was also using for the first time in this project), and then implement the interactivity afterwards. I was incredibly impressed with the ease of prototyping using Tailwind, and I highly recommend using it.\n\nOnce I was ready to begin adding interactivity, I went back to the video by Traversy media. Although we were building completely different projects, I often find the general structure during the beginning stages is often quite similar, which allows me to gain confidence in using the tool, and as the tutorial goes on, I find myself referencing the video less and less until I’m completely on my own.\n\nMost of the interactivity was mostly straightforward, just generating the hex codes, and evaluating how close the user got to each of the respective colours. (_If you want more specifics on how any of the code works, feel free to check out the source code on Github.)_ Although I recognize that this project doesn't rank that highly in the complexity scale, it was intended to be more of a ‘dabble’ to learn the basics of React and the mindset behind using components, with the intention of ‘diving in' more fully when using it to rebuild my personal website, as alluded to earlier.\n\nOne of the fun parts of this experience was using existing community npm packages, as although their installation process was easy, incorporating packages from other individuals to add functionality to my projects was not something I had ever done before. In this case, I used the [react-colorful](https://omgovich.github.io/react-colorful/) package to add the colour picker.\n\n## Part 4: Deploying\n\nSince I was already using Github, it was pretty straightforward to deploy to Netlify. All I had to do was link my accounts, and deploy! Nothing much else to say here!\n\n## Conclusion\n\nIn conclusion, I enjoyed this project as a way to learn the React mindset, and feel prepared to use it in larger and more complex projects. Although the game itself might seem rather esoteric, (when are you _really_ going to need to look at a hex code and know what colour that is), when I am learning a new technology, I often try to choose a different project from the one presented in any tutorial that I may be watching. Doing this forces me to ensure that I am actually grasping the underlying logic and methods behind a tool, instead of just copying what someone else has done line for line and not really understanding why the code works. Overall, I am happy with how my project turned out, and look forward to using these tools again in the future!\n\nIf you have any thoughts about this article, feel free to share them by tweeting me @itsmattberger on Twitter, and otherwise, until the next article!\n\n> 🔗: [http://hex-guesser.netlify.app](http://hex-guesser.netlify.app)  \n> 🖥️: [https://github.com/bergermaestro/hex-guesser](https://github.com/bergermaestro/hex-guesser)","src/data/posts/hexguess-game.md","358a882d43b12911",{"html":217,"metadata":218},"\u003Ch2 id=\"the-backstory\">The Backstory\u003C/h2>\n\u003Cp>My first foray into web development was when my dad introduced me to Wix sometime around Grade 4, and although I don’t have any records of what I built at that time, I can assure you the flash-based site with a bright orange background was truly a relic of the era. \u003Cem>(RIP Flash)\u003C/em>\u003C/p>\n\u003Cp>In Grade 7, I learned about the basics of HTML and CSS, and have been coding and making websites ever since. \u003Cem>(Yes, I feel old when I remember that I learned CSS before tools like Flexbox and CSS Grid existed)\u003C/em>\u003C/p>\n\u003Cp>Sometime I decided that it would be beneficial to put these skills to good use and build a personal website, but I didn’t know how to take a collection of files from my local computer that looked and worked like a website, and actually put them in a place where anyone could access them. To me, it all seemed radically overcomplicated - everything I came across was mentioning things like putting the files on a server, port forwarding, making sure you have a static IP, controlling what ports you have open, and it is safe to say that I quickly became overwhelmed.\u003C/p>\n\u003Cp>At a loss, this is when I turned to Wordpress, which after watching a few videos, seemed like exactly what I needed. I would be able to spin up a Linux server using a cloud hosting provider such as Linode or Vultr, run the Wordpress installer, and then simply focus on coding my custom theme.\u003C/p>\n\u003Cp>Yet, I quickly started running into issues and limitations with Wordpress. I could feel that it was really designed for blogs, and that uses outside of that required some clunky workarounds. Additionally, I often felt ‘isolated’ from other more modern tools that I wanted to use, such as TailwindCSS.\u003C/p>\n\u003Cp>Additionally, now that I had my foot in the door and was gaining a better understanding of how other CMS systems worked, rebuilding my site on a more ‘modern’ tech stack seemed much more appealing. This is when I decided to take the plunge and do what seemed to be the next step for developing frontend web interfaces - learning React.\u003C/p>\n\u003Cblockquote>\n\u003Cp>\u003Cstrong>\u003Cem>Read More:\u003C/em> Why I Rebuilt My Blog - COMING SOON\u003C/strong>\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"part-1-learning-react\">Part 1: Learning React\u003C/h2>\n\u003Cp>Before learning React, I decided that it would probably be best to brush up on my Javascript, but I quickly found that a lot of programming tutorials that explain a language lie on two extremes - they are either “this is a variable and this is how we can put it inside an if statement,” or they’re less tutorials and people just blazing through a complex project. Now, I’m certainly not saying that these videos do not have an entirely valid audience, but instead wishing that there was more content targetted at the middle ground - people who already know how to code in a different language, but want to know about the ‘special’ things that a language offers. \u003Cem>(If anyone knows of a resource like this, please let me know about it.)\u003C/em>\u003C/p>\n\u003Cp>Ultimately, I was not able to find this content, so I decided to jump straight into the deep end, and go back if I came across any concepts which were confusing to me. It was now when I turned to my two favourite channels to learn programming concepts: \u003Ca href=\"https://www.youtube.com/channel/UCsBjURrPoezykLs9EqgamOA\">Fireship.io\u003C/a> and \u003Ca href=\"https://www.youtube.com/channel/UC29ju8bIPH5as8OGnQzwJyA\">Traversy Media\u003C/a>.\u003C/p>\n\u003Cp>I began by watching Fireship’s 100 seconds of React Video, which I like because it gave me a high level understanding of how React worked:\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.youtube.com/watch?v=Tn6-PIqc4UM&#x26;feature=youtu.be\">React in 100 Seconds\u003C/a>\u003C/p>\n\u003Cp>Once I had finished this, I moved onto Brad Traversy’s video, which I tend to watch first at 2x or 3x speed to get the general idea, and then watch again following along myself where I stop and pause if needed.\u003C/p>\n\u003Cp>\u003Ca href=\"https://www.youtube.com/watch?v=w7ejDZ8SWv8&#x26;t=1502s\">React JS Crash Course\u003C/a>\u003C/p>\n\u003Ch2 id=\"part-2-designing-the-interface\">Part 2: Designing the Interface\u003C/h2>\n\u003Cp>As I learned from the first time I built my website, figuring out what you want your user interface to look like beforehand is of paramount importance. Thus, before I could begin coding, I took to using my iPad and notability in order to begin creating a mockup. I had a pretty good idea of what I wanted the site to look like beforehand, so there wasn’t as much brainstorming as I might otherwise.\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/matthewberger/image/upload/v1647712233/hex_Guesser_mockup1_d3f02db4e7.jpg\" alt=\"hexGuesser mockup1.jpeg\">\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/matthewberger/image/upload/v1647712232/hex_Guesser_mockup2_de05f21618.jpg\" alt=\"hexGuesser mockup2.jpeg\">\u003C/p>\n\u003Cp>After this, I refined my ideas a bit more in Figma, and then it was time to start coding!\u003C/p>\n\u003Cp>\u003Cimg src=\"https://res.cloudinary.com/matthewberger/image/upload/v1647712232/hexguess_mockup_839f2af8bf.png\" alt=\"hexguess-mockup.png\">\u003C/p>\n\u003Ch2 id=\"part-3-starting-to-code\">Part 3: Starting to Code\u003C/h2>\n\u003Cp>So, with a single \u003Ccode>npx create-react app\u003C/code>, we were off to the races. I decided that the best way to approach things would be to create the user interface using TailwindCSS (which I was also using for the first time in this project), and then implement the interactivity afterwards. I was incredibly impressed with the ease of prototyping using Tailwind, and I highly recommend using it.\u003C/p>\n\u003Cp>Once I was ready to begin adding interactivity, I went back to the video by Traversy media. Although we were building completely different projects, I often find the general structure during the beginning stages is often quite similar, which allows me to gain confidence in using the tool, and as the tutorial goes on, I find myself referencing the video less and less until I’m completely on my own.\u003C/p>\n\u003Cp>Most of the interactivity was mostly straightforward, just generating the hex codes, and evaluating how close the user got to each of the respective colours. (\u003Cem>If you want more specifics on how any of the code works, feel free to check out the source code on Github.)\u003C/em> Although I recognize that this project doesn’t rank that highly in the complexity scale, it was intended to be more of a ‘dabble’ to learn the basics of React and the mindset behind using components, with the intention of ‘diving in’ more fully when using it to rebuild my personal website, as alluded to earlier.\u003C/p>\n\u003Cp>One of the fun parts of this experience was using existing community npm packages, as although their installation process was easy, incorporating packages from other individuals to add functionality to my projects was not something I had ever done before. In this case, I used the \u003Ca href=\"https://omgovich.github.io/react-colorful/\">react-colorful\u003C/a> package to add the colour picker.\u003C/p>\n\u003Ch2 id=\"part-4-deploying\">Part 4: Deploying\u003C/h2>\n\u003Cp>Since I was already using Github, it was pretty straightforward to deploy to Netlify. All I had to do was link my accounts, and deploy! Nothing much else to say here!\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>In conclusion, I enjoyed this project as a way to learn the React mindset, and feel prepared to use it in larger and more complex projects. Although the game itself might seem rather esoteric, (when are you \u003Cem>really\u003C/em> going to need to look at a hex code and know what colour that is), when I am learning a new technology, I often try to choose a different project from the one presented in any tutorial that I may be watching. Doing this forces me to ensure that I am actually grasping the underlying logic and methods behind a tool, instead of just copying what someone else has done line for line and not really understanding why the code works. Overall, I am happy with how my project turned out, and look forward to using these tools again in the future!\u003C/p>\n\u003Cp>If you have any thoughts about this article, feel free to share them by tweeting me @itsmattberger on Twitter, and otherwise, until the next article!\u003C/p>\n\u003Cblockquote>\n\u003Cp>🔗: \u003Ca href=\"http://hex-guesser.netlify.app\">http://hex-guesser.netlify.app\u003C/a>\u003Cbr>\n🖥️: \u003Ca href=\"https://github.com/bergermaestro/hex-guesser\">https://github.com/bergermaestro/hex-guesser\u003C/a>\u003C/p>\n\u003C/blockquote>",{"headings":219,"imagePaths":236,"frontmatter":237},[220,223,226,229,232,235],{"depth":163,"slug":221,"text":222},"the-backstory","The Backstory",{"depth":163,"slug":224,"text":225},"part-1-learning-react","Part 1: Learning React",{"depth":163,"slug":227,"text":228},"part-2-designing-the-interface","Part 2: Designing the Interface",{"depth":163,"slug":230,"text":231},"part-3-starting-to-code","Part 3: Starting to Code",{"depth":163,"slug":233,"text":234},"part-4-deploying","Part 4: Deploying",{"depth":163,"slug":173,"text":174},[],{"title":206,"summary":207,"image":208,"pubDate":209,"links":238,"type":154},[211,212],"contactly",{"id":239,"data":241,"body":248,"filePath":249,"digest":250,"rendered":251},{"title":242,"summary":243,"image":244,"pubDate":245,"links":246,"type":154},"Contactly","A React App to help you reach out to friends and family more often","https://res.cloudinary.com/matthewberger/image/upload/v1684610841/contactly-mockup-2_bcgnn7.png","May 19 2023",[247],"https://github.com/bergermaestro/contacts-remix","The project I'll be writing about today is (tentatively) called Contactly, and it began because of my desire to not let so much time pass without reaching out to friends and family members. After realising that while similar software existed in the enterprise space for keeping track of clients, nothing existed that was designed specifically for personal use, so I decided to solve the problem myself and make my own.\n\nAs such, I began on my journey of creation. First, I spent some time simply brainstorming what features I would need, and then I spent some time drawing wireframes on paper and then mocking them up in Figma.\nAfter that, I decided on the tech stack that I was going to use to build my project, and started writing code.\n\nSince then, it's been an ongoing project, with the amount of code that I'm writing often being the inverse of how challenging school is at the time. This has meant that I have occasionally come back to the project after a few months of not looking at it with more knowledge in my tool belt (gained either through other internship experience or simply watching development related videos), and realise that a decision that I made was perhaps not the best one, and have reworked the code, and then continued to add features.\n\nAlthough the main concept of the project is fundamentally pretty simple, this project has also allowed me to gain an appreciation for the features that take a project from proof-of-concept to useable day-to-day. Whether this has been working on adding reminder emails using Twilio Sendgrid after realising that users wouldn't be wanting to continuously log in to see who they had to reach out to, or adding the option to import your existing contacts from external contact providers. (The ability to 'link' contacts instead of outright importing them is something I plan on adding soon.)\n\nAltogether, Contactly has been an ongoing passion project for me, born out of a desire to stay connected with loved ones and friends. Through brainstorming, wireframing, and coding, I have developed a deeper understanding of the process of taking a proof-of-concept to a fully functional and usable application, and I am excited to continue working my project in the future.","src/data/posts/contactly.md","5e23736c4ba469b2",{"html":252,"metadata":253},"\u003Cp>The project I’ll be writing about today is (tentatively) called Contactly, and it began because of my desire to not let so much time pass without reaching out to friends and family members. After realising that while similar software existed in the enterprise space for keeping track of clients, nothing existed that was designed specifically for personal use, so I decided to solve the problem myself and make my own.\u003C/p>\n\u003Cp>As such, I began on my journey of creation. First, I spent some time simply brainstorming what features I would need, and then I spent some time drawing wireframes on paper and then mocking them up in Figma.\nAfter that, I decided on the tech stack that I was going to use to build my project, and started writing code.\u003C/p>\n\u003Cp>Since then, it’s been an ongoing project, with the amount of code that I’m writing often being the inverse of how challenging school is at the time. This has meant that I have occasionally come back to the project after a few months of not looking at it with more knowledge in my tool belt (gained either through other internship experience or simply watching development related videos), and realise that a decision that I made was perhaps not the best one, and have reworked the code, and then continued to add features.\u003C/p>\n\u003Cp>Although the main concept of the project is fundamentally pretty simple, this project has also allowed me to gain an appreciation for the features that take a project from proof-of-concept to useable day-to-day. Whether this has been working on adding reminder emails using Twilio Sendgrid after realising that users wouldn’t be wanting to continuously log in to see who they had to reach out to, or adding the option to import your existing contacts from external contact providers. (The ability to ‘link’ contacts instead of outright importing them is something I plan on adding soon.)\u003C/p>\n\u003Cp>Altogether, Contactly has been an ongoing passion project for me, born out of a desire to stay connected with loved ones and friends. Through brainstorming, wireframing, and coding, I have developed a deeper understanding of the process of taking a proof-of-concept to a fully functional and usable application, and I am excited to continue working my project in the future.\u003C/p>",{"headings":254,"imagePaths":255,"frontmatter":256},[],[],{"title":242,"summary":243,"image":244,"pubDate":245,"links":257,"type":154},[247],"must-have-mac-utilities",{"id":258,"data":260,"body":264,"filePath":265,"digest":266,"rendered":267},{"title":261,"summary":262,"pubDate":263,"type":184},"10 Must Have Mac Utilities (Free)","A list of utilities that I find indispensable to my daily productivity","February 22 2022","## Intro\n\nAfter putting much time and research into deciding what laptop I was going to purchase for university, I ultimately decided to purchase the 2020 MacBook Air. Although a MacBook would not have been a laptop I would have contemplated a few years ago, (thermal throttling and butterfly keyboard, anyone?), the introduction of the M1 SOC and Apple’s Education Discount actually made the M1 MacBook Air a compelling offer.\n\nSince then, my relationship with macOS has been pleasant, with no major dealbreakers. Yet, no relationship is perfect, and there have been certain things that I wish worked better, hence the following list of extensions. I can certainly say that they have helped macOS work better for me, and hopefully you will find at least one of them helpful also.\n\n_Note that none of these are really full-fledged applications, but rather command line tools and utilities that integrate wth macOS in order to improve the overall experience._\n\n## 1. Rectangle\n\nComing from a Windows computer, I was incredibly used to being able to drag a window to a side or corner of the screen, and have it snap to that location. Although macOS technically lets you do this if you hover over the green ‘fullscreen’ button, it only supports two apps, and puts them in full screen mode, making it annoying to access the top ribbon. _(Edit: you can get around this by holding the option key as you hover, but that feels even more convoluted.)_ This is where Rectangle comes in. Similar to other applications such as Magnet or BetterTouchTool, Rectangle gives you the ability to drag and drop windows and have them snap into place, or use keyboard shortcuts to lay them out as you wish.\n\n_Download at:_ [_https://rectangleapp.com_](https://rectangleapp.com)\n\n## 2. Vanilla\n\nDoes your taskbar look like an entryway console table that people just keep piling stuff on top of? Does it bother you that some icons are different shades of grey than others? _(ahem, OneDrive)_ Well, deal with those issues no longer. Similar to Bartender, Vanilla gives you an area to put taskbar applications that you can just hide away behind a clean looking arrow. Use command + drag to move the icons you want to be hidden, and relish in not having to see all those icons any longer. Now, if only I could do the same to that console table.\n\n_Download at:_ [_https://matthewpalmer.net/vanilla/_](https://matthewpalmer.net/vanilla/)\n\n## 3. Displaperture\n\nDoes the gap at the bottom of a window in the new versions of Big Sur or Monterey bother you? Do you like the rounded corners on the new MacBook Pros? Do you wish that your screen was actually oval shaped instead of rectangular? _(If this is you, please seek help)_. Well, Displaperture is the application for you. I am not underselling what this app does, but literally all it does is fake rounded corners on a display. But, is it worth it? Absolutely.\n\n_Download at:_ [_https://manytricks.com/displaperture/_](https://manytricks.com/displaperture/)\n\n## 4. ItsyCal\n\nThis is another surprising omission of macOS that surprised me after coming from Windows, where clicking on the date gives you a helpful little calendar so you can see exactly what day of the week your niece’s piano recital is. _(or whatever else you're looking at the calendar for.)_ However, all it does in macOS is bring up Notification Centre, which while useful, is not my desired functionality. _(especially when the large calendar widget only shows you a list of upcoming events.)_ This is where ItsyCal comes to the rescue. It adds a menu bar icon that when clicked on, gives you the aforementioned mini calendar, where you can quickly add calendar events, or open the full calendar app. Furthermore, through some creative customizations you can turn off the date shown by macOS, so that when you click on it, the only date shown is the one from itsyCal\n\n_Download at:_ [_https://www.mowglii.com/itsycal/_](https://www.mowglii.com/itsycal/)\n\n## 5. Alfred\n\nI suppose this is a bit of a cheat on the idea that all of these extend macOS functionality, as Alfred is technically a replacement for Spotlight, but it does search so much better than Spotlight does by default, that I simply had to include it. Apart from directly allowing you to search sites such as Youtube, Amazon, and Wikipedia, in my experience it also accurately shows what you are looking for faster than Spotlight does. So, as someone who already keeps their dock hidden, most of the time I get to the applications that I need simply by typing the first few letters into Alfred, as part of that quest to be as efficient and use the mouse as little as possible. And this is only the beginning of it’s functionality, but I really must move on.\n\n_Download at:_ [_https://www.alfredapp.com_](https://www.alfredapp.com)\n\n## 6. TinkerTool\n\nHidden deep down inside the macOS command line are some obscure features. Do you wish that you could rate your music using half stars? Or perhaps you wish you could always force certain apps to open in light mode? Well, no need to search for these obscure commands any longer. TinkerTool takes these commands and collects them into a simple to use graphical interface, allowing you to toggle these settings without needing to be a command line wizard. Personally, I use this to make ‘hidden’ applications (using ⌘ + H) have their icons appear dimmed in the taskbar, and to disable the dock showing animation.\n\n_Download at:_ [_https://www.bresink.com/osx/TinkerTool.html_](https://www.bresink.com/osx/TinkerTool.html)\n\n## 7. AppCleaner\n\nUnless your app comes with a specific uninstaller, the only recourse you have is to drop the application into the Garbage _(or Bin, if your language is set to British English)_ and say goodbye. This is where AppCleaner comes into play. Open AppCleaner, drag on your app icon, and let it find all the residual files associated with that app. Now, you can have peace of mind knowing that all files associated with that app won’t be sticking around your hard-drive taking up unnecessary space.\n\n_Download at:_ [_https://freemacsoft.net/appcleaner/_](https://freemacsoft.net/appcleaner/)\n\n## 8. CopyClip\n\nThe clipboard was added to Apple’s Lisa computer in 1983, and it and hasn’t changed much since. Yet, it’s 2022, and I often find myself needing to store at least two things onto my clipboard at once. This is where CopyClip comes in. It is my ‘clipboard history’ application of choice, and it lives as a taskbar icon that keeps track of all the things you have added to your clipboard, for that time you copied something really important to your clipboard, and then accidentally overwrote it a few moments later, leaving all those precious characters lost into the void. _(Let's be honest, we've all been there - oh, just me? Well then_…_)_\n\n_Download at:_ [_Mac App Store_](https://apps.apple.com/ca/app/copyclip-clipboard-history/id595191960?mt=12)\n\n## 9. Pictogram\n\nDoes it bother you that not all applications come with Big Sur icons? Do you keep them off of your dock for that very reason? Well, the time to cry about it is over. In combination with [www.macosicons.com](macosicons.com), Pictogram allows you to set a new icon for all those applications that haven't embraced the Big Sur style. Unfortunately it doesn't work for applications downloaded from the Mac App Store, but it's better than nothing.\n\n_Download at:_ [_https://pictogramapp.com_](https://pictogramapp.com)\n\n## 10. Espanso\n\nEspanso is a text-snippet program that allows you to store snippets of text that you write over and over into keyboard shortcuts. It also allows you to dynamically insert text, so you can bind commands such as :d8 to insert today’s date. Unfortunately for some people there is no user interface (you write your desired shortcuts into a .yaml file), and although I am aware there are more elegant pieces of software which provide this same functionality, (the paid version of Alfred from earlier actually includes this), this is the only free software that I could find which accomplishes the same thing. So far, I haven’t had any troubles using it, and if you can get around the aforementioned lack of an interface, I assure you this app will do what you need it to.\n\n_Download at:_ [_https://espanso.org_](https://espanso.org)\n\n## Conclusion\n\nWell, that concludes the list! If you have any other applications which you think I should download, feel free to let me know about them by tweeting me @itsmattberger on Twitter, and otherwise, until the next article!","src/data/posts/must-have-mac-utilities.md","3d471dcd5c754c4c",{"html":268,"metadata":269},"\u003Ch2 id=\"intro\">Intro\u003C/h2>\n\u003Cp>After putting much time and research into deciding what laptop I was going to purchase for university, I ultimately decided to purchase the 2020 MacBook Air. Although a MacBook would not have been a laptop I would have contemplated a few years ago, (thermal throttling and butterfly keyboard, anyone?), the introduction of the M1 SOC and Apple’s Education Discount actually made the M1 MacBook Air a compelling offer.\u003C/p>\n\u003Cp>Since then, my relationship with macOS has been pleasant, with no major dealbreakers. Yet, no relationship is perfect, and there have been certain things that I wish worked better, hence the following list of extensions. I can certainly say that they have helped macOS work better for me, and hopefully you will find at least one of them helpful also.\u003C/p>\n\u003Cp>\u003Cem>Note that none of these are really full-fledged applications, but rather command line tools and utilities that integrate wth macOS in order to improve the overall experience.\u003C/em>\u003C/p>\n\u003Ch2 id=\"1-rectangle\">1. Rectangle\u003C/h2>\n\u003Cp>Coming from a Windows computer, I was incredibly used to being able to drag a window to a side or corner of the screen, and have it snap to that location. Although macOS technically lets you do this if you hover over the green ‘fullscreen’ button, it only supports two apps, and puts them in full screen mode, making it annoying to access the top ribbon. \u003Cem>(Edit: you can get around this by holding the option key as you hover, but that feels even more convoluted.)\u003C/em> This is where Rectangle comes in. Similar to other applications such as Magnet or BetterTouchTool, Rectangle gives you the ability to drag and drop windows and have them snap into place, or use keyboard shortcuts to lay them out as you wish.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://rectangleapp.com\">\u003Cem>https://rectangleapp.com\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"2-vanilla\">2. Vanilla\u003C/h2>\n\u003Cp>Does your taskbar look like an entryway console table that people just keep piling stuff on top of? Does it bother you that some icons are different shades of grey than others? \u003Cem>(ahem, OneDrive)\u003C/em> Well, deal with those issues no longer. Similar to Bartender, Vanilla gives you an area to put taskbar applications that you can just hide away behind a clean looking arrow. Use command + drag to move the icons you want to be hidden, and relish in not having to see all those icons any longer. Now, if only I could do the same to that console table.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://matthewpalmer.net/vanilla/\">\u003Cem>https://matthewpalmer.net/vanilla/\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"3-displaperture\">3. Displaperture\u003C/h2>\n\u003Cp>Does the gap at the bottom of a window in the new versions of Big Sur or Monterey bother you? Do you like the rounded corners on the new MacBook Pros? Do you wish that your screen was actually oval shaped instead of rectangular? \u003Cem>(If this is you, please seek help)\u003C/em>. Well, Displaperture is the application for you. I am not underselling what this app does, but literally all it does is fake rounded corners on a display. But, is it worth it? Absolutely.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://manytricks.com/displaperture/\">\u003Cem>https://manytricks.com/displaperture/\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"4-itsycal\">4. ItsyCal\u003C/h2>\n\u003Cp>This is another surprising omission of macOS that surprised me after coming from Windows, where clicking on the date gives you a helpful little calendar so you can see exactly what day of the week your niece’s piano recital is. \u003Cem>(or whatever else you’re looking at the calendar for.)\u003C/em> However, all it does in macOS is bring up Notification Centre, which while useful, is not my desired functionality. \u003Cem>(especially when the large calendar widget only shows you a list of upcoming events.)\u003C/em> This is where ItsyCal comes to the rescue. It adds a menu bar icon that when clicked on, gives you the aforementioned mini calendar, where you can quickly add calendar events, or open the full calendar app. Furthermore, through some creative customizations you can turn off the date shown by macOS, so that when you click on it, the only date shown is the one from itsyCal\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://www.mowglii.com/itsycal/\">\u003Cem>https://www.mowglii.com/itsycal/\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"5-alfred\">5. Alfred\u003C/h2>\n\u003Cp>I suppose this is a bit of a cheat on the idea that all of these extend macOS functionality, as Alfred is technically a replacement for Spotlight, but it does search so much better than Spotlight does by default, that I simply had to include it. Apart from directly allowing you to search sites such as Youtube, Amazon, and Wikipedia, in my experience it also accurately shows what you are looking for faster than Spotlight does. So, as someone who already keeps their dock hidden, most of the time I get to the applications that I need simply by typing the first few letters into Alfred, as part of that quest to be as efficient and use the mouse as little as possible. And this is only the beginning of it’s functionality, but I really must move on.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://www.alfredapp.com\">\u003Cem>https://www.alfredapp.com\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"6-tinkertool\">6. TinkerTool\u003C/h2>\n\u003Cp>Hidden deep down inside the macOS command line are some obscure features. Do you wish that you could rate your music using half stars? Or perhaps you wish you could always force certain apps to open in light mode? Well, no need to search for these obscure commands any longer. TinkerTool takes these commands and collects them into a simple to use graphical interface, allowing you to toggle these settings without needing to be a command line wizard. Personally, I use this to make ‘hidden’ applications (using ⌘ + H) have their icons appear dimmed in the taskbar, and to disable the dock showing animation.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://www.bresink.com/osx/TinkerTool.html\">\u003Cem>https://www.bresink.com/osx/TinkerTool.html\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"7-appcleaner\">7. AppCleaner\u003C/h2>\n\u003Cp>Unless your app comes with a specific uninstaller, the only recourse you have is to drop the application into the Garbage \u003Cem>(or Bin, if your language is set to British English)\u003C/em> and say goodbye. This is where AppCleaner comes into play. Open AppCleaner, drag on your app icon, and let it find all the residual files associated with that app. Now, you can have peace of mind knowing that all files associated with that app won’t be sticking around your hard-drive taking up unnecessary space.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://freemacsoft.net/appcleaner/\">\u003Cem>https://freemacsoft.net/appcleaner/\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"8-copyclip\">8. CopyClip\u003C/h2>\n\u003Cp>The clipboard was added to Apple’s Lisa computer in 1983, and it and hasn’t changed much since. Yet, it’s 2022, and I often find myself needing to store at least two things onto my clipboard at once. This is where CopyClip comes in. It is my ‘clipboard history’ application of choice, and it lives as a taskbar icon that keeps track of all the things you have added to your clipboard, for that time you copied something really important to your clipboard, and then accidentally overwrote it a few moments later, leaving all those precious characters lost into the void. \u003Cem>(Let’s be honest, we’ve all been there - oh, just me? Well then\u003C/em>…\u003Cem>)\u003C/em>\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://apps.apple.com/ca/app/copyclip-clipboard-history/id595191960?mt=12\">\u003Cem>Mac App Store\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"9-pictogram\">9. Pictogram\u003C/h2>\n\u003Cp>Does it bother you that not all applications come with Big Sur icons? Do you keep them off of your dock for that very reason? Well, the time to cry about it is over. In combination with \u003Ca href=\"macosicons.com\">www.macosicons.com\u003C/a>, Pictogram allows you to set a new icon for all those applications that haven’t embraced the Big Sur style. Unfortunately it doesn’t work for applications downloaded from the Mac App Store, but it’s better than nothing.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://pictogramapp.com\">\u003Cem>https://pictogramapp.com\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"10-espanso\">10. Espanso\u003C/h2>\n\u003Cp>Espanso is a text-snippet program that allows you to store snippets of text that you write over and over into keyboard shortcuts. It also allows you to dynamically insert text, so you can bind commands such as :d8 to insert today’s date. Unfortunately for some people there is no user interface (you write your desired shortcuts into a .yaml file), and although I am aware there are more elegant pieces of software which provide this same functionality, (the paid version of Alfred from earlier actually includes this), this is the only free software that I could find which accomplishes the same thing. So far, I haven’t had any troubles using it, and if you can get around the aforementioned lack of an interface, I assure you this app will do what you need it to.\u003C/p>\n\u003Cp>\u003Cem>Download at:\u003C/em> \u003Ca href=\"https://espanso.org\">\u003Cem>https://espanso.org\u003C/em>\u003C/a>\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Well, that concludes the list! If you have any other applications which you think I should download, feel free to let me know about them by tweeting me @itsmattberger on Twitter, and otherwise, until the next article!\u003C/p>",{"headings":270,"imagePaths":305,"frontmatter":306},[271,274,277,280,283,286,289,292,295,298,301,304],{"depth":163,"slug":272,"text":273},"intro","Intro",{"depth":163,"slug":275,"text":276},"1-rectangle","1. Rectangle",{"depth":163,"slug":278,"text":279},"2-vanilla","2. Vanilla",{"depth":163,"slug":281,"text":282},"3-displaperture","3. Displaperture",{"depth":163,"slug":284,"text":285},"4-itsycal","4. ItsyCal",{"depth":163,"slug":287,"text":288},"5-alfred","5. Alfred",{"depth":163,"slug":290,"text":291},"6-tinkertool","6. TinkerTool",{"depth":163,"slug":293,"text":294},"7-appcleaner","7. AppCleaner",{"depth":163,"slug":296,"text":297},"8-copyclip","8. CopyClip",{"depth":163,"slug":299,"text":300},"9-pictogram","9. Pictogram",{"depth":163,"slug":302,"text":303},"10-espanso","10. Espanso",{"depth":163,"slug":173,"text":174},[],{"title":261,"summary":262,"pubDate":263,"type":184},"payroll-with-python",{"id":307,"data":309,"body":313,"filePath":314,"digest":315,"rendered":316},{"title":310,"summary":311,"pubDate":312,"type":154},"Simplifying Payroll with Python","How I simplified a business' payroll process by creating an application which generates employee data into PDF Paystubs.","Sept 16 2021","## Introduction\n\nRecently, I worked on helping a small business simplify and make more efficient their process for running payroll and delivering paystubs to employees.\n\nIn the current system, there was a reliance on manual data transfer for generating paystubs, which was a time consuming process, and as with any manual process, left open room for error. These were all areas that I knew the software could improve, so the guideline I determined to direct this project was to:\n\n> Simplify the process of running payroll by integrating with existing systems in order to provide a more intuitive and time-efficient method of generating paystubs.\n\n## Development\n\n### Implementation\n\nIn order to implement this project, I used a number of python modules, including but not limited to:\n\n_PySimpleGui_ in order to create the user interface. Although it does not allow for much in the way of customizability and seems to be mainly geared towards simple form-style interfaces, it fulfilled the needs for this project without overcomplicating the process through the use of a more robust system.\n\n_PyPDF_ in order to take the data read from the excel file and output it to a PDF. This was my first time using this Python module, and although most things were straightforward to accomplish, there were a few oddities. For example, when laying out elements on the output PDF, it begins from the bottom left corner, whereas all other layout software I have ever used have begun from the top left, including software such as Photoshop or Figma or even when absolutely positioning elements in HTML.\n\n_Openpyxl_ for reading data from an Excel spreadsheet and getting it into python.\n\n### Challenges\n\nAlthough the majority of the development of this project was straightforward, there were still a few challenges which I encountered during the process of building this program.\n\n#### Selecting Pay Period\n\nFirst, was developing the best way to select the pay period the software should generate the paystubs for.\n\nAlthough the spreadsheet had a row corresponding to each pay period, I wanted the pay period selector to be more user friendly that simply a large list of dates.\n\nThus, I wanted to separate the selector for the month, and which pay period within the month into different dropdowns. However, since the spreadsheet also needs to track information such as holiday or vacation pay, or simply to add a note for the accountant, it cannot be guaranteed that there would be the same number of rows allocated to each month.\n\nThus, I ultimately determined that the best way to select what pay period the paystubs should be generated for was within the Excel spreadsheet itself, by highlighting the rows for which the paystubs should be generated. This solution was a win-win because it not only eliminated ambiguity in the code, but is also straightforward for the end user.\n\n#### Custom Save Location\n\nDuring testing, I was simply saving the project to the current working directory in order to make sure that information was getting written correctly to the pdf. This worked well for development, but one of the features that was incredibly important for the final version was the ability to save the files to a custom folder.\n\nI had assumed that this would be available via the _.save_ function within the PyPDF module, but this was incorrect - the module only comes with the ability to save to the current working directory. This was problematic as I planned to package the file into a .exe in order to easily distribute and install it. Thus, I had to use Python's built in file management system to have the code save the file to the working directory and then take the most recently added file from the working directory and cut and paste it into the specified output directory.\n\n## Conclusion\n\nAltogether, I believe that I helped this company save time and by extension money by helping them implement this software into their workflow, and it also have me valuable learning opportunities along the way.\n\n### Doing it Over Again\n\nIf I were to tackle this project again from the beginning, there a few things I would change in the implementation of this project\n\nNamely, although at the beginning of the project I spent time researching Python modules that would help me accomplish the task, I never stopped to think whether a standalone Python program was the best way to tackle this problem at all. Now, after executing on this option, I can see with hindsight that it probably would have been more efficient and even user friendlier to create an Add-In within Excel itself, which means that there would only be one program to deal with, further streamlining the process of generating payroll.\n\n---\n\nThanks for reading! If you have any thoughts about this article, feel free to tweet me about them @itsmattberger on Twitter. Otherwise, until next time!","src/data/posts/payroll-with-python.md","2b0dfebe6f2506d1",{"html":317,"metadata":318},"\u003Ch2 id=\"introduction\">Introduction\u003C/h2>\n\u003Cp>Recently, I worked on helping a small business simplify and make more efficient their process for running payroll and delivering paystubs to employees.\u003C/p>\n\u003Cp>In the current system, there was a reliance on manual data transfer for generating paystubs, which was a time consuming process, and as with any manual process, left open room for error. These were all areas that I knew the software could improve, so the guideline I determined to direct this project was to:\u003C/p>\n\u003Cblockquote>\n\u003Cp>Simplify the process of running payroll by integrating with existing systems in order to provide a more intuitive and time-efficient method of generating paystubs.\u003C/p>\n\u003C/blockquote>\n\u003Ch2 id=\"development\">Development\u003C/h2>\n\u003Ch3 id=\"implementation\">Implementation\u003C/h3>\n\u003Cp>In order to implement this project, I used a number of python modules, including but not limited to:\u003C/p>\n\u003Cp>\u003Cem>PySimpleGui\u003C/em> in order to create the user interface. Although it does not allow for much in the way of customizability and seems to be mainly geared towards simple form-style interfaces, it fulfilled the needs for this project without overcomplicating the process through the use of a more robust system.\u003C/p>\n\u003Cp>\u003Cem>PyPDF\u003C/em> in order to take the data read from the excel file and output it to a PDF. This was my first time using this Python module, and although most things were straightforward to accomplish, there were a few oddities. For example, when laying out elements on the output PDF, it begins from the bottom left corner, whereas all other layout software I have ever used have begun from the top left, including software such as Photoshop or Figma or even when absolutely positioning elements in HTML.\u003C/p>\n\u003Cp>\u003Cem>Openpyxl\u003C/em> for reading data from an Excel spreadsheet and getting it into python.\u003C/p>\n\u003Ch3 id=\"challenges\">Challenges\u003C/h3>\n\u003Cp>Although the majority of the development of this project was straightforward, there were still a few challenges which I encountered during the process of building this program.\u003C/p>\n\u003Ch4 id=\"selecting-pay-period\">Selecting Pay Period\u003C/h4>\n\u003Cp>First, was developing the best way to select the pay period the software should generate the paystubs for.\u003C/p>\n\u003Cp>Although the spreadsheet had a row corresponding to each pay period, I wanted the pay period selector to be more user friendly that simply a large list of dates.\u003C/p>\n\u003Cp>Thus, I wanted to separate the selector for the month, and which pay period within the month into different dropdowns. However, since the spreadsheet also needs to track information such as holiday or vacation pay, or simply to add a note for the accountant, it cannot be guaranteed that there would be the same number of rows allocated to each month.\u003C/p>\n\u003Cp>Thus, I ultimately determined that the best way to select what pay period the paystubs should be generated for was within the Excel spreadsheet itself, by highlighting the rows for which the paystubs should be generated. This solution was a win-win because it not only eliminated ambiguity in the code, but is also straightforward for the end user.\u003C/p>\n\u003Ch4 id=\"custom-save-location\">Custom Save Location\u003C/h4>\n\u003Cp>During testing, I was simply saving the project to the current working directory in order to make sure that information was getting written correctly to the pdf. This worked well for development, but one of the features that was incredibly important for the final version was the ability to save the files to a custom folder.\u003C/p>\n\u003Cp>I had assumed that this would be available via the \u003Cem>.save\u003C/em> function within the PyPDF module, but this was incorrect - the module only comes with the ability to save to the current working directory. This was problematic as I planned to package the file into a .exe in order to easily distribute and install it. Thus, I had to use Python’s built in file management system to have the code save the file to the working directory and then take the most recently added file from the working directory and cut and paste it into the specified output directory.\u003C/p>\n\u003Ch2 id=\"conclusion\">Conclusion\u003C/h2>\n\u003Cp>Altogether, I believe that I helped this company save time and by extension money by helping them implement this software into their workflow, and it also have me valuable learning opportunities along the way.\u003C/p>\n\u003Ch3 id=\"doing-it-over-again\">Doing it Over Again\u003C/h3>\n\u003Cp>If I were to tackle this project again from the beginning, there a few things I would change in the implementation of this project\u003C/p>\n\u003Cp>Namely, although at the beginning of the project I spent time researching Python modules that would help me accomplish the task, I never stopped to think whether a standalone Python program was the best way to tackle this problem at all. Now, after executing on this option, I can see with hindsight that it probably would have been more efficient and even user friendlier to create an Add-In within Excel itself, which means that there would only be one program to deal with, further streamlining the process of generating payroll.\u003C/p>\n\u003Chr>\n\u003Cp>Thanks for reading! If you have any thoughts about this article, feel free to tweet me about them @itsmattberger on Twitter. Otherwise, until next time!\u003C/p>",{"headings":319,"imagePaths":343,"frontmatter":344},[320,323,325,329,332,336,339,340],{"depth":163,"slug":321,"text":322},"introduction","Introduction",{"depth":163,"slug":324,"text":154},"development",{"depth":326,"slug":327,"text":328},3,"implementation","Implementation",{"depth":326,"slug":330,"text":331},"challenges","Challenges",{"depth":333,"slug":334,"text":335},4,"selecting-pay-period","Selecting Pay Period",{"depth":333,"slug":337,"text":338},"custom-save-location","Custom Save Location",{"depth":163,"slug":173,"text":174},{"depth":326,"slug":341,"text":342},"doing-it-over-again","Doing it Over Again",[],{"title":310,"summary":311,"pubDate":312,"type":154},"no-more-times-new-roman",{"id":345,"data":347,"body":353,"filePath":354,"digest":355,"rendered":356},{"title":348,"summary":349,"image":350,"pubDate":351,"type":352},"Times New Roman: The Default No Longer","A satirical essay on why society should immediately cease the use of Times New Roman","https://res.cloudinary.com/matthewberger/image/upload/v1647295380/curtis_thornton_nsq_H_Rbh_Isk_unsplash_43d3da030f.jpg","March 14 2022","Miscellaneous","> To preface, this is article is satire (as I hope will become apparent), and second, this was originally published for a high school newspaper, so names within the article have been changed for privacy reasons.\n>\n> \\- Matthew\n\nAs a civilization, we have an unrelenting desire to move forward. We are always innovating, learning, and trying to improve our world. There have been innumerable advancements which have changed the course of human history, from our evolution as hunters and gatherers to inventions such as the compass, paper money, and electricity. Yet, I believe that there is a singular invention which supersedes all of this: the ability to communicate through a written language. The ability to write things down and have others understand them has given permanence to stories, evolution to ideas, and validity to rules, and can be seen as the impetus for many of the inventions mentioned above.\n\nYet, human history has not been without its flaws. Despite all these advancements, we have undeniably made errors and done things that we now deem barbaric and unacceptable. Slavery, human sacrifice, and many others. But, let me be honest. I think there is a greater evil, rampant in our society today, which overshadows all of these. I say it is this:\n\nUsing Times New Roman in 2022.\n\nNow, I can’t be sure exactly how you’re feeling, but I can guess that you’re taken aback. Perhaps you’re feeling like you’ve just been told to end a relationship that you thought was healthy, or that issues such as homelessness and racism need to come before this insignificant quibble.\n\nWell, let me explain why you’re wrong.\n\nAll of society today is based off the use of written documents. In courts you will see the Charter, in churches you will see the Bible, in universities you will see diplomas, in museums you will see manifestos, and in McDonalds you will see menus. Without this written language, our world would be unrecognizable.\n\nSo now that we have established the importance of written language, let us see why Times New Roman is incompatible with our society today.\n\nTimes New Roman was first designed in the 1930's by Stanley Morrison for London newspaper _the Times._ Even from this, we can see it’s design is inherently flawed. It's ascenders and ligatures bear the mark of the ideas that were popular in society at the time. The vertical stress on the capital ‘O’ reminds us of a ballot where not all women could vote and the pointy descender of the lowercase ‘q’ is a reminder of the harsh labour of federally sanctioned “unemployment relief camps.” This font was created when store owners could still refuse service to someone based on the colour of their skin. How are we supposed to share our new, enlightened ideas in a font that bears the hallmarks of all these injustices?\nx\nThis is why we must cease to use it, and stop it from clouding our thinking, corrupting our thoughts, and ruining our morals.\n\nAnd thankfully, I am not alone in this belief. Samuel Dawson, a fellow student had this to say when he was asked about his thoughts on Times New Roman:\n\n_It's an abomination, cursing the beauty that I should be able to behold. Such wondrous word I could have beheld if not for their portrayal in such a horrific manner_\n\nOf course, there were some people who disagreed. When asked, Daniel Stevens said this:\n\n_\"I personally like Times New Roman. It has an acute crisp style, one that I feel lends itself well to essays where you want accurate, diligent observations. In addition the capital N's are poignantly detailed, a wonderful way to head studies on Necromancy or Newman\"_\n\nAnd as a response to that, all I can say is - if you're interested in Necromancy or Newman, you might just want to move to the 1930s altogether.\n\nI hope you can begin to agree with why we must eliminate this font from our repertoire, and rise above the subliminal messages that it contains within its lines. Yet, now you may be asking yourself, what can I use instead?\n\nIf you're writing something cool, hip, trendy or liberal - choose a sans serif. Those are the ones that don't have the pointy bits at the end. My recommendations are Helvetica, Lato, or Century Gothic. And if you’re mandated for a serif, Faustina or Merriweather are good recently created options.\n\nEven if none of those options suit you, there’s lots of great fonts to choose from. But please, just don’t choose Comic Sans instead.\n\n---\n\nThanks for Reading! If you have any thoughts about the article (please remember it’s satire), feel free to let me know what you thought by tweeting me @itsmattberger on Twitter, otherwise, until next time!","src/data/posts/no-more-times-new-roman.md","7e56e6c597ac50c5",{"html":357,"metadata":358},"\u003Cblockquote>\n\u003Cp>To preface, this is article is satire (as I hope will become apparent), and second, this was originally published for a high school newspaper, so names within the article have been changed for privacy reasons.\u003C/p>\n\u003Cp>- Matthew\u003C/p>\n\u003C/blockquote>\n\u003Cp>As a civilization, we have an unrelenting desire to move forward. We are always innovating, learning, and trying to improve our world. There have been innumerable advancements which have changed the course of human history, from our evolution as hunters and gatherers to inventions such as the compass, paper money, and electricity. Yet, I believe that there is a singular invention which supersedes all of this: the ability to communicate through a written language. The ability to write things down and have others understand them has given permanence to stories, evolution to ideas, and validity to rules, and can be seen as the impetus for many of the inventions mentioned above.\u003C/p>\n\u003Cp>Yet, human history has not been without its flaws. Despite all these advancements, we have undeniably made errors and done things that we now deem barbaric and unacceptable. Slavery, human sacrifice, and many others. But, let me be honest. I think there is a greater evil, rampant in our society today, which overshadows all of these. I say it is this:\u003C/p>\n\u003Cp>Using Times New Roman in 2022.\u003C/p>\n\u003Cp>Now, I can’t be sure exactly how you’re feeling, but I can guess that you’re taken aback. Perhaps you’re feeling like you’ve just been told to end a relationship that you thought was healthy, or that issues such as homelessness and racism need to come before this insignificant quibble.\u003C/p>\n\u003Cp>Well, let me explain why you’re wrong.\u003C/p>\n\u003Cp>All of society today is based off the use of written documents. In courts you will see the Charter, in churches you will see the Bible, in universities you will see diplomas, in museums you will see manifestos, and in McDonalds you will see menus. Without this written language, our world would be unrecognizable.\u003C/p>\n\u003Cp>So now that we have established the importance of written language, let us see why Times New Roman is incompatible with our society today.\u003C/p>\n\u003Cp>Times New Roman was first designed in the 1930’s by Stanley Morrison for London newspaper \u003Cem>the Times.\u003C/em> Even from this, we can see it’s design is inherently flawed. It’s ascenders and ligatures bear the mark of the ideas that were popular in society at the time. The vertical stress on the capital ‘O’ reminds us of a ballot where not all women could vote and the pointy descender of the lowercase ‘q’ is a reminder of the harsh labour of federally sanctioned “unemployment relief camps.” This font was created when store owners could still refuse service to someone based on the colour of their skin. How are we supposed to share our new, enlightened ideas in a font that bears the hallmarks of all these injustices?\nx\nThis is why we must cease to use it, and stop it from clouding our thinking, corrupting our thoughts, and ruining our morals.\u003C/p>\n\u003Cp>And thankfully, I am not alone in this belief. Samuel Dawson, a fellow student had this to say when he was asked about his thoughts on Times New Roman:\u003C/p>\n\u003Cp>\u003Cem>It’s an abomination, cursing the beauty that I should be able to behold. Such wondrous word I could have beheld if not for their portrayal in such a horrific manner\u003C/em>\u003C/p>\n\u003Cp>Of course, there were some people who disagreed. When asked, Daniel Stevens said this:\u003C/p>\n\u003Cp>\u003Cem>“I personally like Times New Roman. It has an acute crisp style, one that I feel lends itself well to essays where you want accurate, diligent observations. In addition the capital N’s are poignantly detailed, a wonderful way to head studies on Necromancy or Newman”\u003C/em>\u003C/p>\n\u003Cp>And as a response to that, all I can say is - if you’re interested in Necromancy or Newman, you might just want to move to the 1930s altogether.\u003C/p>\n\u003Cp>I hope you can begin to agree with why we must eliminate this font from our repertoire, and rise above the subliminal messages that it contains within its lines. Yet, now you may be asking yourself, what can I use instead?\u003C/p>\n\u003Cp>If you’re writing something cool, hip, trendy or liberal - choose a sans serif. Those are the ones that don’t have the pointy bits at the end. My recommendations are Helvetica, Lato, or Century Gothic. And if you’re mandated for a serif, Faustina or Merriweather are good recently created options.\u003C/p>\n\u003Cp>Even if none of those options suit you, there’s lots of great fonts to choose from. But please, just don’t choose Comic Sans instead.\u003C/p>\n\u003Chr>\n\u003Cp>Thanks for Reading! If you have any thoughts about the article (please remember it’s satire), feel free to let me know what you thought by tweeting me @itsmattberger on Twitter, otherwise, until next time!\u003C/p>",{"headings":359,"imagePaths":360,"frontmatter":361},[],[],{"title":348,"summary":349,"image":350,"pubDate":351,"type":352}]