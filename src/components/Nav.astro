---
import { Icon } from "astro-icon/components";
import OutlineButton from "./buttons/OutlineButton.astro";
import Resume from "/Matthew-Berger-Resume-September-2025.pdf";

const pages = [
  { name: "Blog", path: "/blog" },
  { name: "About", path: "/about" },
  { name: "Reading", path: "/reading" },
  { name: "Photography", path: "/photography" },
];
---

<style>
  /*   Open state of the dialog  */
  dialog[open] {
    opacity: 1;
    transform: translateX(0);
  }

  /*   Closed state of the dialog   */
  dialog {
    min-width: 100vw;
    min-height: 100vh;
    opacity: 0;
    transform: translateX(100%);
    transition: all 0.3s allow-discrete;
  }

  /*   Before-open state  */
  /* Needs to be after the previous dialog[open] rule to take effect,
    as the specificity is the same */
  @starting-style {
    dialog[open] {
      opacity: 0;
      transform: translateX(100%);
    }
  }

  /* Transition the :backdrop when the dialog modal is promoted to the top layer */
  dialog::backdrop {
    background-color: rgb(25 35 41 / 0%);
    transition: all 0.3s allow-discrete;
  }

  dialog[open]::backdrop {
    background-color: rgb(25 35 41 / 30%);
  }

  /* This starting-style rule cannot be nested inside the above selector
because the nesting selector cannot represent pseudo-elements. */
  @starting-style {
    dialog[open]::backdrop {
      background-color: rgb(25 35 41 / 0%);
    }
  }
</style>

<dialog class="h-screen w-screen bg-transparent">
  <div
    id="dialog-container"
    class="ml-auto mr-0 h-dvh w-full max-w-56 bg-livid-700 p-4 pl-8 text-livid-300"
  >
    <button autofocus class="float-right" id="closeButton"
      ><Icon name="ph:x" size="30" /></button
    >
    <nav class="flex flex-col pt-16 font-width-[92]">
      {
        pages.map((page) => (
          <a
            href={page.path}
            class="block py-4 text-lg transition-colors hover:text-livid-200"
          >
            {page.name}
          </a>
        ))
      }
      <div class="pt-4">
        <OutlineButton text="Resume" path={Resume} target="_blank" />
      </div>
    </nav>
  </div>
</dialog>

<div
  class="mx-auto flex flex-row items-center justify-between p-6 md:px-14 lg:max-w-6xl lg:px-6"
>
  <span class="mr-10 cursor-pointer sm:py-0">
    <a href="/">
      <Icon name="logo" size="80" />
    </a>
  </span>

  <button id="showButton" class="sm:hidden">
    <Icon name="ph:list" class="cursor-pointer" size="30" />
  </button>
  <nav
    class="hidden w-auto flex-row flex-wrap items-center justify-center space-x-12 font-width-[92] sm:flex"
  >
    {
      pages.map((page) => (
        <a href={page.path} class="transition-colors hover:text-livid-200">
          {page.name}
        </a>
      ))
    }
    <OutlineButton text="Resume" path={Resume} target="_blank" />
  </nav>
</div>

<script>
  function getElement<T extends Element>(selector: string): T {
    const element = document.querySelector(selector);
    if (!element) {
      throw new Error(`Element with selector "${selector}" not found`);
    }
    return element as T;
  }

  document.addEventListener("astro:page-load", () => {
    const dialog = getElement<HTMLDialogElement>("dialog");
    const showButton = getElement<HTMLButtonElement>("#showButton");
    const closeButton = getElement<HTMLButtonElement>("#closeButton");
    const dialogContainer = getElement<HTMLElement>("#dialog-container");

    // Close on outside click
    document.addEventListener("click", (event) => {
      if (
        event.target instanceof Node &&
        !dialogContainer.contains(event.target) &&
        dialog.open &&
        !showButton.contains(event.target)
      ) {
        dialog.close();
        document.body.style.overflow = "auto";
      }
    });

    showButton.addEventListener("click", () => {
      dialog.showModal();
      document.body.style.overflow = "hidden";
    });

    closeButton.addEventListener("click", () => {
      dialog.close();
      document.body.style.overflow = "auto";
    });

    document.addEventListener("astro:before-preparation", (event) => {
      const originalLoader = event.loader;
      event.loader = async function () {
        if (dialog.open) {
          dialog.close();
          await new Promise((resolve) => setTimeout(resolve, 50));
        }
        await originalLoader();
      };
    });
  });
</script>
